<!DOCTYPE html>
<html>
    <head>
        <title>Titulo</title>
        <style>
            html, body { margin: 0; padding: 0; overflow: hidden; }
            #text {
                position: absolute;
                padding: 10px;
                width: 100%;
                text-align: center;
                color: #FFFFFF;
            }
        </style>
    </head>
    <body>
        <div id="text">Danna Betancourt<br/>
          Grupo de cubo y cono <br/>
        </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r94/three.min.js"></script>
    <script src="funciones-transform.js"></script>
    <script src="MAIN.js"></script>
    </body>
    </html>

<body>
  <script type="module">
    import * as THREE from 'https://sebastiann16.github.io/CompG/three.module.js';
    import { OrbitControls } from 'https://sebastiann16.github.io/CompG/OrbitControls.js';
    var WIDTH = window.innerWidth;
    var HEIGHT = window.innerHeight;

    var renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(WIDTH, HEIGHT);
    renderer.setClearColor(0xDDDDDD, 1);
    document.body.appendChild(renderer.domElement);

    var scene = new THREE.Scene();

    var camera = new THREE.PerspectiveCamera(70, WIDTH / HEIGHT);
   //eje z
    camera.position.z = 10; 
    //eje y
    camera.position.y = 10; 
    //eje x
    camera.position.x = 10;
    scene.add(camera);
    const light = new THREE.AmbientLight(0x404040, 5);
    scene.add(light);


    const color = [0x51005D, 0x0000FF, 0x8A2BE2, 0x51005D];

    function cubo(base, altura, ancho, col) {
      const geometry = new THREE.BoxGeometry(base, altura, ancho);
      const material = new THREE.MeshPhongMaterial({ color: col });
      return new THREE.Mesh(geometry, material);
    }

    var ArCub = [];
    var n = color.length;
    var lado=3.5;
    for (var i = 0; i < 4; i++) {
      ArCub[i]= cubo( 3,10,2, color[i]);
      ArCub[i].position.x = 0;
      ArCub[i].position.y = 0;
    }

    const group = new THREE.Group();
    for (i = 0; i < n; i++) {
      group.add(ArCub[i]);
    }

   
    group.rotation.y = Math.PI / 4;

    scene.add(group);

    function cono(radio, altura, caras, col) {
      const geometry = new THREE.ConeGeometry(radio, altura, caras);
      const material = new THREE.MeshNormalMaterial({ color: col });
     return new THREE.Mesh(geometry, material);
    }    
  
    const controls = new OrbitControls(camera, renderer.domElement);
//Creacion de la malla
const size=100;
            const divisions=100;
            const gridHelper = new THREE.GridHelper(size, divisions);
            scene.add(gridHelper);

    function animate() {

      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera)
    }
    animate();


  </script>

</body>

</html>